close all; clear all; clc;
format long;
% addpath 'Functions Optimitzacio'\
% addpath State-Space\
addpath("../Test_daily_profile/Intra_day_forecast_paper/");

run create_list_of_CCRCs.m

selected_combinations=double(pyrunfile('CCRCs_selected.py','combinations_selected'));

list_indicators ={'H2_freq', 'H2_vdc','DCgain_freq','DCgain_vdc'};%

list_indicators_index = [2 3 4 5]; %  % index of the indicator in the excel file with exact small-signal stability results

% constr_num_changes=1;
% constr_num_changes_start=constr_num_changes-1;
weight_ind = [1 1 1 1] % weights of each indicator
%weight_ind = [0.1 0.3 0.3  0.15 0.15] % weights of each indicator

CCRC_prev_OP=-1; % initialize the CCRC of previous timestamp

%% Power flows
X_PF = readmatrix('X_PF.xlsx');
X_IPC = readmatrix(['X_IPC.xlsx']);

X_PF_IPC=[X_PF,X_IPC];

%%
% Define column names
columnNames = {'Exec_time','CCRC','CCRC_index','num_changes','Obj_fun','H2_freq','H2_vdc','DCgain_freq','DCgain_vdc','N_of_checked_CCRCs','checked_CCRCs'};

% Initialize an empty table
T_results = table('Size', [0, length(columnNames)], ...
                   'VariableTypes', repmat({'double'}, 1, length(columnNames)), ...
                   'VariableNames', columnNames);
%%
% == Main loop ==
for iisamples=1:96%length(Pload_tot_vect)
    constr_num_changes=1;
    iisamples
    
    tic();

    list_stable_CCRCs_at_OP=[];
    %% check stable combinations at OP
    for ii=1:length(selected_combinations)
        stab=pyrunfile('Predict_stability.py','stab', c=selected_combinations(ii), X=array2table(X_PF_IPC(iisamples,:)));
        stab= double(py.array.array('d', py.numpy.nditer(stab)));
        if stab
            list_stable_CCRCs_at_OP = [list_stable_CCRCs_at_OP, selected_combinations(ii)];
        end
    end

    if CCRC_prev_OP~=-1

        if any(ismember(list_stable_CCRCs_at_OP,list_of_stable_CCRCs_prev_OP))==false
            t_stab_file = readmatrix(['Stab_H2_DCgain_CCRC_',num2str(CCRC_prev_OP),'_daily_prof.xlsx']);
            stab = t_stab_file(iisamples,1);
            if stab == 1
                list_stable_CCRCs_at_OP=[list_stable_CCRCs_at_OP, CCRC_prev_OP];
            end
        end
    end

    need_to_recalculate=1;
    while need_to_recalculate==1
        T_indicators = table();
        for ii_ind=1:length(list_indicators)
            str_indicator = string(list_indicators(ii_ind));
            T_indicators.(str_indicator)={[]};
        end
    
        T_indicators_not_scaled = table();
        for ii_ind=1:length(list_indicators)
            str_indicator = string(list_indicators(ii_ind));
            T_indicators_not_scaled.(str_indicator)={[]};
        end
        %% calculate T_decision for first OP
        if CCRC_prev_OP==-1
            CCRC_stables_constr=[];
            for ii=1:length(list_stable_CCRCs_at_OP)
                pred_indicators=pyrunfile('Predict_indicators.py','pred', c=list_stable_CCRCs_at_OP(ii), X=array2table(X_PF_IPC(iisamples,:)), list_indicators=py.list(list_indicators));
                pred_indicators = double(py.array.array('d', py.numpy.nditer(pred_indicators)));
    
                for ii_ind = 1:length(list_indicators)
                    str_indicator = string(list_indicators(ii_ind)); % name of the indicator as string     
                    T_indicators.(str_indicator) = {[T_indicators.(str_indicator){:} pred_indicators(ii_ind)]};
                end
                
                CCRC_stables_constr=[CCRC_stables_constr,list_stable_CCRCs_at_OP(ii)];
    
            end
    
            T_decision = zeros(1,length(list_stable_CCRCs_at_OP)); %--> Decide by min sum indicators
            for ii_ind=1:length(list_indicators)
                str_indicator = string(list_indicators(ii_ind));
                T_decision = T_decision + T_indicators.(str_indicator){:}.*weight_ind(ii_ind);
            end
        %% calculate T_decision for successive OP    
        else
            constr_num_changes_respected=0;
            CCRC_stables_constr=[];
            while constr_num_changes_respected==0 && constr_num_changes<=6
                for ii=1:length(list_stable_CCRCs_at_OP)
                    if ismember(list_stable_CCRCs_at_OP(ii),list_of_stable_CCRCs_prev_OP)
                        num_changes = sum(table2array(T_combinacions_viables(list_stable_CCRCs_at_OP(ii),[1:6]))~=table2array(T_combinacions_viables(T_results.CCRC(iisamples-1),[1:6])));
                        if num_changes<=constr_num_changes %num_changes>= constr_num_changes-1 && 
                            constr_num_changes_respected=1;
                            pred_indicators=pyrunfile('Predict_indicators.py','pred', c=list_stable_CCRCs_at_OP(ii), X=array2table(X_PF_IPC(iisamples,:)), list_indicators=py.list(list_indicators));          
                            pred_indicators = double(py.array.array('d', py.numpy.nditer(pred_indicators)));
    
                            for ii_ind = 1:length(list_indicators)
                                str_indicator = string(list_indicators(ii_ind)); % name of the indicator as string     
                                T_indicators.(str_indicator) = {[T_indicators.(str_indicator){:} pred_indicators(ii_ind)]};
                            end
                            CCRC_stables_constr=[CCRC_stables_constr,list_stable_CCRCs_at_OP(ii)];
                        end
                    end            
                end
                if constr_num_changes_respected==0
                    constr_num_changes=constr_num_changes+1;
                end
            end
            
            T_decision = zeros(1,length(CCRC_stables_constr)); %--> Decide by min sum indicators
            for ii_ind=1:length(list_indicators)
                str_indicator = string(list_indicators(ii_ind));
                T_decision = T_indicators.(str_indicator){:}.*weight_ind(ii_ind)+T_decision;
            end
            T_decision =  T_decision - sum(table2array(T_results(iisamples-1,list_indicators_scaled).*weight_ind));
        end
        %% check if the 
        % [min_val, min_val_index] = min(T_decision);
        
        T_results.Exec_time_dd(iisamples)=toc;

        [sorted_values, sorted_indices] = sort(T_decision);    
    
        verify_sol=0;
        idx_ver=1;
        while verify_sol==0
            if idx_ver <= length(T_decision)
                min_val=sorted_values(idx_ver);
                min_val_index=sorted_indices(idx_ver);
                if CCRC_prev_OP==-1  
                    CCRC_to_be_verified=list_stable_CCRCs_at_OP(min_val_index);
                else
                    CCRC_to_be_verified=CCRC_stables_constr(min_val_index);
                end

                %verify stability using precalculated stability by exact
                %models (not valid to estimate computing time)
                t_stab_file = readmatrix(['Stab_H2_DCgain_CCRC_',num2str(CCRC_prev_OP),'_daily_prof.xlsx']);
                stab = t_stab_file(iisamples,1);
                
                %verify stability using exact models 
                % eval_stab_verify
                %stab = Stab_Hinf_H2_dcgain_en_freq_vdc(iisamples,1);

                if stab == 1
                    verify_sol=1;
                    T_results.verify(iisamples)=idx_ver;
                    need_to_recalculate=0;
                else
                   idx_ver=idx_ver+1;
                end
            else
                list_stable_CCRCs_at_OP= setdiff(list_stable_CCRCs_at_OP,CCRC_stables_constr);
                verify_sol=1;
            end
        end
    end

    T_results.Exec_time(iisamples)=toc;
    if CCRC_prev_OP==-1  
        T_results.CCRC(iisamples)=list_stable_CCRCs_at_OP(min_val_index);
    else
        T_results.CCRC(iisamples)=CCRC_stables_constr(min_val_index);
    end
    T_results.CCRC_index(iisamples) = find(selected_combinations==T_results.CCRC(iisamples));
    if CCRC_prev_OP==-1
        T_results.num_changes(iisamples)=-1;
    else
        num_changes = sum(table2array(T_combinacions_viables(T_results.CCRC(iisamples),[1:6]))~=table2array(T_combinacions_viables(T_results.CCRC(iisamples-1),[1:6])));
        T_results.num_changes(iisamples)=num_changes;
    end
    T_results.Obj_fun(iisamples)=min_val;
    for ii_ind=1:length(list_indicators)
        str_indicator = string(list_indicators(ii_ind));
        T_results.(str_indicator)(iisamples)=T_indicators.(str_indicator){1}(min_val_index);%{[]};
    end   
    %T_results.list_of_stable_CCRCs(iisamples)=list_stable_CCRCs_at_OP;
    T_results.N_of_checked_CCRCs(iisamples)=length(CCRC_stables_constr);
    list_of_stable_CCRCs_prev_OP=list_stable_CCRCs_at_OP;
    CCRC_prev_OP=T_results.CCRC(iisamples);
end

writetable(T_results,'./Decision_Making/Data_Driven_noweigths_oldmodel_verify_dailyprof_V2_comptime_ver.xlsx')
